{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","apiSource","setApiSource","url","setUrl","data","setData","Option","Select","className","style","background","padding","title","bordered","width","margin","onSubmit","evt","preventDefault","sendData","axios","post","then","response","console","log","desc","hashid","catch","Error","result_url","Item","onChange","value","defaultValue","target","size","placeholder","type","htmlType","itemLayout","dataSource","renderItem","item","Meta","description","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2UAkGeA,MA7Ff,WAAgB,IAAD,EAEqBC,mBAAS,YAF9B,mBAENC,EAFM,KAEKC,EAFL,OAGSF,mBAAS,MAHlB,mBAGNG,EAHM,KAGDC,EAHC,OAIWJ,mBAAS,IAJpB,mBAINK,EAJM,KAIAC,EAJA,KAMLC,EAAWC,IAAXD,OAqDR,OACE,yBAAKE,UAAU,OACb,yBAAKC,MAAO,CAAEC,WAAY,UAAWC,QAAS,UAC5C,kBAAC,IAAD,CAAMC,MAAM,oBAAoBC,UAAU,EAAOJ,MAAO,CAAEK,MAAO,MAAOC,OAAQ,WAC9E,kBAAC,IAAD,CAAMC,SA/CO,SAACC,GAEpBA,EAAIC,iBACJ,IAAMC,EAAW,GACjBA,EAAQ,IAAUjB,EAEJ,WAAdF,GAA0BoB,IAAMC,KAAK,cAAeF,GACjDG,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZlB,EAAQ,GAAD,mBAEAD,GAFA,CAGH,CACEQ,MAAOV,EACPwB,KAAK,mBAAD,OAAqBH,EAASnB,KAAKuB,eAK9CC,OAAM,WACL,MAAM,IAAIC,SAIA,aAAd7B,GAA4BoB,IAAMC,KAAK,kBAAmBF,GACvDG,MAAK,SAACC,GACLlB,EAAQ,GAAD,mBAEAD,GAFA,CAGH,CACEQ,MAAOV,EACPwB,KAAMH,EAASnB,KAAK0B,kBAK3BF,OAAM,WACL,MAAM,IAAIC,UAUsBrB,UAAU,gBACtC,kBAAC,IAAKuB,KAAN,KACE,kBAAC,IAAD,CAAQC,SAzDI,SAACC,GACvBhC,EAAagC,IAwDgCC,aAAa,WAAWzB,MAAO,CAAEK,MAAO,QACzE,kBAACR,EAAD,CAAQ2B,MAAM,YAAd,YACA,kBAAC3B,EAAD,CAAQ2B,MAAM,UAAd,WAEF,kBAAC,IAAD,CAAOD,SAzDE,SAACf,GACpBd,EAAOc,EAAIkB,OAAOF,QAwDuBG,KAAK,QAAQC,YAAY,0BAE1D,kBAAC,IAAKN,KAAN,KACE,kBAAC,IAAD,CAAQO,KAAK,UAAUF,KAAK,QAAQG,SAAS,UAA7C,aAGJ,kBAAC,IAAD,CACEC,WAAW,aACXC,WAAYrC,EACZsC,WAAY,SAAAC,GAAI,OACd,kBAAC,IAAKZ,KAAN,KACE,kBAAC,IAAKA,KAAKa,KAAX,CACEhC,MAAO+B,EAAK/B,MACZiC,YAAa,uBAAGC,KAAMH,EAAKjB,MAAOiB,EAAKjB,gBC3ErCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.71d64a3a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport axios from 'axios';\nimport { Input, Card, Form, Button, List, Select } from 'antd';\n\nfunction App() {\n\n  const [apiSource, setApiSource] = useState('CleanURI');\n  const [url, setUrl] = useState(null);\n  const [data, setData] = useState([]);\n\n  const { Option } = Select;\n\n  const handleApiSource = (value) => {\n    setApiSource(value);\n  }\n\n  const handleChange = (evt) => {\n    setUrl(evt.target.value);\n  }\n\n  const handleSubmit = (evt) => {\n\n    evt.preventDefault();\n    const sendData = {};\n    sendData['url'] = url;\n\n    apiSource === 'Relink' && axios.post('/api/links/', sendData)\n      .then((response) => {\n        console.log(response)\n        setData(\n          [\n            ...data,\n            {\n              title: url,\n              desc: `https://rel.ink/${response.data.hashid}`\n            }\n          ]\n        );\n      })\n      .catch(() => {\n        throw new Error();\n      });\n\n\n    apiSource === 'CleanURI' && axios.post('/api/v1/shorten', sendData)\n      .then((response) => {\n        setData(\n          [\n            ...data,\n            {\n              title: url,\n              desc: response.data.result_url\n            }\n          ]\n        );\n      })\n      .catch(() => {\n        throw new Error();\n      });\n\n\n  }\n\n  return (\n    <div className=\"App\">\n      <div style={{ background: '#ECECEC', padding: '100px' }}>\n        <Card title=\"Shorten your link\" bordered={false} style={{ width: '50%', margin: '0 auto' }}>\n          <Form onSubmit={handleSubmit} className=\"shorten-form\">\n            <Form.Item>\n              <Select onChange={handleApiSource} defaultValue=\"CleanURI\" style={{ width: '50%' }}>\n                <Option value=\"CleanURI\">CleanURI</Option>\n                <Option value=\"Relink\">Relink</Option>\n              </Select>\n              <Input onChange={handleChange} size=\"large\" placeholder=\"Enter your link here\" />\n            </Form.Item>\n            <Form.Item>\n              <Button type=\"primary\" size='large' htmlType=\"submit\">Shorten</Button>\n            </Form.Item>\n          </Form>\n          <List\n            itemLayout=\"horizontal\"\n            dataSource={data}\n            renderItem={item => (\n              <List.Item>\n                <List.Item.Meta\n                  title={item.title}\n                  description={<a href={item.desc}>{item.desc}</a>}\n                />\n              </List.Item>\n            )}\n          />\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}